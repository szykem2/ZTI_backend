#%RAML 1.0
title: "Server-Api"
baseUri: http://127.0.0.1:9080/
version: v1
/users:
  get:
    description: Retrieve list of all users
    headers:
      Authorization: <GENERATED_TOKEN>
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": 4,
                  "login": "testLogin3",
                  "email": "testMail3"
                }
              ]

/users/{userId}:
    get:
    description: Retrieve user with given id
    headers:
      Authorization: <GENERATED_TOKEN>
    responses:
      200:
        body:
          application/json:
            example: |
              {
                  "id": 2,
                  "username": "CtestUSerKtestUSer3testUSerXtestUSerW",
                  "email": ""
              }

/users/login:
  post:
    description: Endpoint for logging in - as response token is returned
    body:
      application/json:
        example: |
          {
            "username" : "testUserName",
            "password" : "hashedPassword"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "token" : <GENERATED_TOKEN>
              }
      401:

/users/register:
  post:
    description: Registering new user
    body:
      application/json:
        example: |
          {
            "id" : 1,
            "username" : "testUSername",
            "password" : "hashedPassword",
            "email" : "testEmail"
          }
    responses:
      200:
      409:
        body:
          text/plain:
            example: |
                "invalid login"

/validateLogin:
  post:
    description: Validates whether login provided in registration form is not used
    body:
      application/json:
        example: |
          {
            "login": "testLogin"
          }
    responses:
      204:
      409:

/validateEmail:
  post:
    description: Validates whether email provided in registration form is not used
    body:
      application/json:
        example: |
          {
            "email": "testEmail"
          }
    responses:
      204:
      409:

/projects: 
  get:
    description: Retrieves projects user is authorized to view
      headers:
        Authorization: <GENERATED_TOKEN>
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "id" : 1,
                    "title" : "testPrjectName",
                    "description" : "testProjectDescription",
                  },
                  {
                    "id" : 2,
                    "title" : "testPrjectName2",
                    "description" : "testProjectDescription",
                  }
                ]

  post:
    description: Create a project
      headers:
        Authorization: <GENERATED_TOKEN>
      body:
        application/json:
          example: |
            {
              "title": "TestProjectTitle",
              "description": "Description of the test project"
            }
      responses:
        200:

/projects/{id}:
  delete:
    description: Delete a project
      headers:
        Authorization: <GENERATED_TOKEN>
      responses:
        204:
        404:
        409:

/projects/{id}/users:
  get:
    description: Get list of users without permission to view project with given id
    headers:
      Authorization: <GENERATED_TOKEN>
    body:
      application/json:
        example: |
          {
            "id": <projectID>
          }
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id" : 1,
                  "username" : "testUser",
                },
                {
                  "id" : 2,
                  "username" : "testUser",
                }
              ]
      401:

  post:
    description: Add permission to view project for a given user
    headers:
      Authorization: <GENERATED_TOKEN>
    body:
      application/json:
        example: |
          {
            "email": "email@addres.com", 
            "login": "username"
          }
    responses:
      200:
      401:
      409:

/projects/{id}/users/{userid}:
  delete:
    description: Remove user from project area
      headers:
        Authorization: <GENERATED_TOKEN>
    responses:
      204:
      403:

/projects/{id}/admins:
  get:
    description: Retrieve list of adminstrators of the project
    headers:
      Authorization: <GENERATED_TOKEN>
    responses:
      200: 
        body:
          application/json:
            example: |
              [
                {
                  "id" : 1,
                  "username" : "testUSername",
                  "email" : "testEmail"
                },
                {
                  "id" : 2,
                  "username" : "testUSername1",
                  "email" : "testEmail"
                },
              ]
      401:
  post:
    description: Add new user as a administrator of a given project
    headers:
      Authorization: <GENERATED_TOKEN>
    body:
      application/json:
        example: |
          {
            "id" : 1,
            "username" : "testUSername",
            "email" : "testEmail"
          }
    responses:
      200: 
      401:

/items: 
  post:
    description: Create item in a given project area
      headers:
        Authorization: <GENERATED_TOKEN>
      body:
        application/json:
          example: |
            [
              {
                "projectid": 1, 
                "title": "itemName", 
                "owner": "admin", 
                "approver": "userName1", 
                "type": 1, 
                "creationDate": "date_when_created", 
                "description": "Short description of the work item"
              },
              {
                "projectid": 2, 
                "title": "itemNameTwo", 
                "owner": "admin", 
                "approver": "userName1", 
                "type": 1, 
                "creationDate": "date_when_created", 
                "description": "Short description of the work item"
              }
            ]
    responses:
      200:
      401:
      409:

/items/{itemid}:
  put:
    description: Update work item
      headers:
        Authorization: <GENERATED_TOKEN>
      body:
        application/json:
          example: |
            [
              {
                "projectid": 1, 
                "title": "itemName", 
                "owner": "admin", 
                "approver": "userName1", 
                "type": 1, 
                "creationDate": "date_when_created", 
                "description": "Short description of the work item"
              },
              {
                "projectid": 2, 
                "title": "itemNameTwo", 
                "owner": "admin", 
                "approver": "userName1", 
                "type": 1, 
                "creationDate": "date_when_created", 
                "description": "Short description of the work item"
              }
            ]
      responses:
        200:
        401:
        409:

  delete:
    description: Remove work item
      headers: 
        Authorization: <GENERATED_TOKEN>
      responses:
        200:
        401:
        404:

/items/{projectid}:
  get:
    description: Get items assigned to project with a give project
      headers:
        Authorization: <GENERATED_TOKEN>
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id" : 1,
                  "description" : "project description",
                  "title" : "project name",
                  "isAdmin" : true
                },
                {
                  "id" : 2,
                  "description" : "project description",
                  "title" : "project name",
                  "isAdmin" : false
                }
              ]
      401:
      409:

/items/itemstatus:
  get:
    description: Retrieve item statuses
  responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "commentid" : 1,
                  "status" : "new"
                },
                {
                  "commentid" : 2,
                  "status" : "in progress"
                }
              ]

/items/itemtypes:
  get:
    description: Retrieve item types
  responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "commentid" : 1,
                  "status" : "bug"
                },
                {
                  "commentid" : 2,
                  "status" : "feature"
                }
              ]

/items/{itemid}/comments:
  get:
    description: Retrieve coments for a given item in a given project
      headers:
        Authorization: <GENERATED_TOKEN>
  responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "commentid" : 1,
                  "username" : "testUser",
                  "created" : <date_created>,
                  "content": <content_of_the_comment>
                },
                {
                  "commentid" : 2,
                  "username" : "testUser3",
                  "created" : <date_created>,
                  "content": <content_of_the_comment>
                }
              ]
      401:
      409:

  post:
    description: Create new work item
      headers:
        Authorization: <GENERATED_TOKEN>
      body:
        application/json:
          example: |
            {
              "content": <content_of_the_comment>, 
              "created": <date_created>,
            }
  responses:
    200:
    401:

/requests:
  get:
    description: Retrieve list of projects, to which user can request access
    headers:
      Authorization: <GENERATED_TOKEN>
    responses: 
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id" : 1,
                  "description" : "project description",
                  "title" : "project name",
                },
                {
                  "id" : 2,
                  "description" : "project description",
                  "title" : "project name",
                }
              ]
      401:

/requests/{id}:
  get:
    description: Retrieve list of users who requested for access to the given project area
    headers:
      Authorization: <GENERATED_TOKEN>
    responses: 
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id" : 1,
                  "username" : "testUSername",
                  "email" : "testEmail"
                },
                {
                  "id" : 2,
                  "username" : "testUSername1",
                  "email" : "testEmail"
                },
              ]
      401:

  post:
    description: Request for access to the given project area
    headers:
      Authorization: <GENERATED_TOKEN>
    responses: 
      200:
      401:

/requests/{id}/{userid}:
  post:
    description: Accept user request
    headers:
      Authorization: <GENERATED_TOKEN>
    responses: 
      200:
      401:

  delete:
    description: Deny user request
    headers:
      Authorization: <GENERATED_TOKEN>
    responses: 
      200:
      401: